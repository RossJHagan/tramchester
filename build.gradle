
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'application'

mainClassName = 'com.tramchester.App'

def antBuild = new groovy.util.AntBuilder()
def buildNumber = System.getenv("TRAVIS_BUILD_NUMBER") ?: "0"

def environment = System.getenv("ENV") ?: "Dev"

version = '1.0'

project.ext {
    dropwizardVersion = '0.9.2'
}

repositories {
    maven {
        url "http://m2.neo4j.org/content/repositories/releases"
    }
    maven {
        url "http://download.osgeo.org/webdav/geotools/"
    }
    maven {
        url "http://download.java.net/maven/2"
    }
    maven {
        url "https://raw.github.com/neo4j-contrib/m2/master/releases"
    }
    mavenCentral()
}

dependencies {
    compile('io.dropwizard:dropwizard-core:' + dropwizardVersion) { exclude group: 'asm', module: 'asm' }
    compile('io.dropwizard:dropwizard-assets:' + dropwizardVersion) { exclude group: 'asm', module: 'asm' }
    compile 'org.picocontainer:picocontainer:2.14.3',
            'org.neo4j:neo4j:2.3.4',
            'org.neo4j:neo4j-spatial:0.15-neo4j-2.3.4',
            'joda-time:joda-time:2.4',
            'com.googlecode.jcsv:jcsv:1.4.0',
            'net.lingala.zip4j:zip4j:1.2.3',
            'commons-io:commons-io:2.4',
            'org.apache.httpcomponents:httpclient:4.5.1',
            'org.apache.commons:commons-collections4:4.1',
            'com.javadocmd:simplelatlng:1.3.1',
            'com.amazonaws:aws-java-sdk:1.10.59',
            'io.appium:java-client:4.1.2'
    compile ('io.swagger:swagger-jaxrs:1.5.12') {
        exclude group: 'javax.ws.rs', module: 'jsr311-api'
    }
    compile ('io.swagger:swagger-annotations:1.5.12') {
        exclude group: 'io.swagger', module: 'swagger-parser'
    }
    compile ('io.swagger:swagger-jersey2-jaxrs:1.5.12') {
        exclude group: 'org.glassfish.jersey.core', module: 'jersey-common'
        exclude group: 'org.glassfish.jersey.core', module: 'jersey-server'
        exclude group: 'org.glassfish.jersey.core', module: 'jersey-client'
        exclude group: 'org.glassfish.jersey.containers', module: 'jersey-container-servlet-core'
    }

    testCompile group: 'junit', name: 'junit', version: '4.11',
            'org.assertj:assertj-core:1.2.0',
            'io.dropwizard:dropwizard-testing:' + dropwizardVersion,
            'org.easymock:easymock:3.4',
            'org.seleniumhq.selenium:selenium-java:2.53.1'
}

sourceSets {
    test {
        java {
            srcDirs = ['src/test/unit', 'src/test/integration', 'src/test/acceptance']
        }
    }
}

task cfnassist << {
    antBuild.taskdef(name: 'cfnassist', classname: 'tw.com.ant.CfnAssistAntTask') {
        classpath {
            fileset(dir: 'lib/cfnassist-1.0.140/lib/', includes: 'cfnassist-all-1.0.140.jar')
        }
    }
}

jar {
    zip64 = true
    manifest {
        attributes(
                "Manifest-Version": "1.0",
                "Class-Path": configurations.runtime.collect { it.getName() }.join(' '),
                "Main-Class": mainClassName
        )
    }
    baseName = project.name 
    from({ configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) } }) {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
}

task stage(dependsOn: ['clean', 'installApp'])

clean {
    delete 'int_test_tramchester.db' , 'data/tram/data.zip', 'data/bus/data.zip', 'int_test_bus_tramchester.db',
            'perf_test_tramchester.db'
    delete fileTree('data/tram') {
        include '*.txt'
    }
    delete fileTree('data/tram/gtdf-out') {
        include '*.txt'
    }
    delete 'data/tram/gtdf-out'
    delete fileTree('data/bus') {
        include '*.txt'
    }
    delete fileTree('data/all') {
        include '*.txt'
    }
}

run {
    args 'server', 'config/local.yml'
}

task pullData(type:JavaExec) {
    main = 'com.tramchester.dataimport.FetchDataFromUrl'
    classpath = sourceSets.main.runtimeClasspath
    args 'http://odata.tfgm.com/opendata/downloads/TfGMgtfs.zip', 'data', 'tramData-1.0.zip'
}

task buses(type:JavaExec) {
    main = mainClassName
    classpath = sourceSets.main.runtimeClasspath
    args 'server', 'config/buses.yml'
}

test {
    // t2.micro has 1gb
    maxHeapSize = '1500m'
    testLogging {
        events "passed", "skipped", "failed", "started"
    }
    useJUnit {
        excludeCategories 'com.tramchester.BusTest', 'com.tramchester.AcceptanceTest'
    }
}

task busTest(type: Test) {
    useJUnit {
        includeCategories 'com.tramchester.BusTest'
    }
}

task whitelist(dependsOn: cfnassist) << {
    antBuild.cfnassist(region: 'eu-west-1', project: 'tramchesterB', env: environment) {
        WhiteList(port: '80', tag:'web')
        WhiteList(port: '443', tag:'web')
    }
}

task blacklist(dependsOn: cfnassist) << {
    antBuild.cfnassist(region: 'eu-west-1', project: 'tramchesterB', env: environment) {
        BlackList(port: '80', tag:'web')
        BlackList(port: '443', tag:'web')
    }
}

task localAcceptance(type: Test) {
    useJUnit {
        testLogging {
            events "passed", "skipped", "failed", "started"
        }
        includeCategories 'com.tramchester.AcceptanceTest'
    }
}

task localAppium(type: Test) {
    systemProperty 'appium', 'true'
    useJUnit {
        includeCategories 'com.tramchester.AcceptanceTest'
    }
}

task acceptance(type: Test, dependsOn: whitelist) {
    logging.captureStandardOutput LogLevel.INFO
    useJUnit {
        includeCategories 'com.tramchester.AcceptanceTest'
    }
}
acceptance.finalizedBy blacklist

task uploadData(dependsOn: ['cfnassist', 'pullData']) << {
    antBuild.cfnassist(region: 'eu-west-1', buildNumber: buildNumber, bucketname:'tramchester2dist') {
        Artifact(name: 'data', value: 'data/tramData-1.0.zip')
        S3Create()
    }
}

task diagrams(dependsOn: cfnassist) << {
    antBuild.cfnassist(region: 'eu-west-1') {
        Diagrams(target: '.')
    }
}

distZip {
    into('config') {
        from 'config'
    }
}

task uploadApp(dependsOn: ['cfnassist', 'distZip', 'uploadSupportFiles'])  << {
    antBuild.cfnassist(region: 'eu-west-1', buildNumber: buildNumber, bucketname:'tramchester2dist') {
		Artifact(name: 'package', value: 'build/distributions/tramchester-1.0.zip')
		S3Create()
	}
}

task uploadSupportFiles(dependsOn: 'cfnassist')  << {
    antBuild.cfnassist(region: 'eu-west-1', buildNumber: buildNumber, bucketname:'tramchester2dist') {
		Artifact(name: 'install', value: 'deploy/setupTramWebServer.sh')
		Artifact(name: 'cloudinit', value: 'deploy/cloudInit.txt')
		S3Create()
	}
}

task infra(dependsOn: cfnassist) << {
    antBuild.cfnassist(region: 'eu-west-1', project: 'tramchesterB', env: environment, sns: 'true') {
		Templates(target: 'deploy/infra')
	}
}

task upload(dependsOn: ['uploadData', 'uploadApp'])

task deploy(dependsOn: cfnassist) << {
    antBuild.cfnassist(region: 'eu-west-1', project: 'tramchesterB', env: environment, buildNumber: buildNumber, sns: 'true') {
		Templates(target: 'deploy/servers.json')
	}
}

task updateLB(dependsOn: cfnassist) << {
    antBuild.cfnassist(region: 'eu-west-1', project: 'tramchesterB', env: environment, buildNumber: buildNumber, sns: 'true') {
		ELBUpdate(typeTag: 'web')
	}
}

task tidy(dependsOn: cfnassist) << {
    antBuild.cfnassist(region: 'eu-west-1', project: 'tramchesterB', env: environment) {
		TidyStacks(target: 'deploy/servers.json', typeTag:'web')
	}
}

task whitelistUAT(dependsOn: cfnassist) << {
    antBuild.cfnassist(region: 'eu-west-1', project: 'tramchesterB', env: 'UAT') {
        WhiteList(port: '80', tag:'web')
        WhiteList(port: '443', tag:'web')
    }
}

task blacklistUAT(dependsOn: cfnassist) << {
    antBuild.cfnassist(region: 'eu-west-1', project: 'tramchesterB', env: 'UAT') {
        BlackList(port: '80', tag:'web')
        BlackList(port: '443', tag:'web')
    }
}

