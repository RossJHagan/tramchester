apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'application'

mainClassName = 'com.tramchester.App'

def antBuild = new groovy.util.AntBuilder()
def buildNumber = System.getenv("SNAP_PIPELINE_COUNTER") ?: "0"
def environment = System.getenv("ENV") ?: "Dev"

version = '1.0'

project.ext {
    dropwizardVersion = '0.8.1'
}

repositories {
    maven {
        url "http://m2.neo4j.org/content/repositories/releases"
    }
    maven {
        url "http://download.osgeo.org/webdav/geotools/"
    }
    maven {
        url "http://download.java.net/maven/2"
    }
    maven {
        url "https://raw.github.com/neo4j-contrib/m2/master/releases"
    }
    mavenCentral()
}

dependencies {
    compile('io.dropwizard:dropwizard-core:' + dropwizardVersion) { exclude group: 'asm', module: 'asm' }
    compile('io.dropwizard:dropwizard-assets:' + dropwizardVersion) { exclude group: 'asm', module: 'asm' }
    compile 'org.picocontainer:picocontainer:2.14.3',
            'org.neo4j:neo4j:2.2.2',
            'org.neo4j:neo4j-spatial:0.14-neo4j-2.2.2',
            'joda-time:joda-time:2.4',
            'com.googlecode.jcsv:jcsv:1.4.0',
            'net.lingala.zip4j:zip4j:1.2.3',
            'org.apache.commons:commons-io:1.3.2',
            'org.apache.httpcomponents:httpclient:4.3.4'

    testCompile group: 'junit', name: 'junit', version: '4.11',
            'org.assertj:assertj-core:1.2.0',
            'org.mockito:mockito-core:1.9.5',
            'io.dropwizard:dropwizard-testing:' + dropwizardVersion,
			'org.easymock:easymock:3.3.1'
}

jar {
    manifest {
        attributes(
                "Manifest-Version": "1.0",
                "Class-Path": configurations.runtime.collect { it.getName() }.join(' '),
                "Main-Class": mainClassName
        )
    }
    baseName = project.name 
    from({ configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) } }) {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
}

task stage(dependsOn: ['clean', 'installApp'])

clean {
	delete "int_test_tramchester.db"
}

run {
    args 'server', 'config/local.yml'
}

task pullData(type:JavaExec) {
    main = 'com.tramchester.dataimport.FetchDataFromUrl'
    classpath = sourceSets.main.runtimeClasspath
    args 'http://odata.tfgm.com/opendata/downloads/TfGMgtfs.zip', 'data', 'tramData-1.0.zip'
}

task buses(type:JavaExec) {
    main = mainClassName
    classpath = sourceSets.main.runtimeClasspath
    args 'server', 'config/buses.yml'
}

sourceSets {
    test {
        java {
            srcDirs = ['src/test/unit', 'src/test/integration']
        }
    }
}

task uploadData(dependsOn: ['cfnassist', 'pullData']) << {
    antBuild.cfnassist(region: 'eu-west-1', buildNumber: buildNumber, bucketname:'tramchester2dist') {
        Artifact(name: 'data', value: 'data/tramData-1.0.zip')
        S3Create()
    }
}

task cfnassist << {
    antBuild.taskdef(name: 'cfnassist', classname: 'tw.com.ant.CfnAssistAntTask') {
        classpath {
            fileset(dir: 'lib/cfnassist-1.0.121/lib/', includes: '*.jar')
        }
    }
}

task diagrams(dependsOn: cfnassist) << {
    antBuild.cfnassist(region: 'eu-west-1') {
        Diagrams(target: '.')
    }
}

distZip {
    into('config') {
        from 'config'
    }
}

task uploadApp(dependsOn: ['cfnassist', 'distZip', 'uploadSupportFiles'])  << {
    antBuild.cfnassist(region: 'eu-west-1', buildNumber: buildNumber, bucketname:'tramchester2dist') {
		Artifact(name: 'package', value: 'build/distributions/tramchester-1.0.zip')
		S3Create()
	}
}

task uploadSupportFiles(dependsOn: 'cfnassist')  << {
    antBuild.cfnassist(region: 'eu-west-1', buildNumber: buildNumber, bucketname:'tramchester2dist') {
		Artifact(name: 'install', value: 'deploy/setupTramWebServer.sh')
		Artifact(name: 'cloudinit', value: 'deploy/cloudInit.txt')
		S3Create()
	}
}

task infra(dependsOn: cfnassist) << {
    antBuild.cfnassist(region: 'eu-west-1', project: 'tramchesterB', env: environment, sns: 'true') {
		Templates(target: 'deploy/infra')
	}
}

task upload(dependsOn: ['uploadData', 'uploadApp'])

task deploy(dependsOn: cfnassist) << {
    antBuild.cfnassist(region: 'eu-west-1', project: 'tramchesterB', env: environment, buildNumber: buildNumber, sns: 'true') {
		Templates(target: 'deploy/servers.json')
	}
}

task updateLB(dependsOn: cfnassist) << {
    antBuild.cfnassist(region: 'eu-west-1', project: 'tramchesterB', env: environment, buildNumber: buildNumber, sns: 'true') {
		ELBUpdate(typeTag: 'web')
	}
}

task tidy(dependsOn: cfnassist) << {
    antBuild.cfnassist(region: 'eu-west-1', project: 'tramchesterB', env: environment) {
		TidyStacks(target: 'deploy/servers.json', typeTag:'web')
	}
}

task whitelist(dependsOn: cfnassist) << {
    antBuild.cfnassist(region: 'eu-west-1', project: 'tramchesterB', env: environment) {
		WhiteList(port: '80', tag:'web')
	}
}

task blacklist(dependsOn: cfnassist) << {
    antBuild.cfnassist(region: 'eu-west-1', project: 'tramchesterB', env: environment) {
		BlackList(port: '80', tag:'web')
	}
}
